// Toggle dropdown visibility
document.getElementById('accountDropdownBtn').addEventListener('click', function(e) {
    e.stopPropagation();
    const dropdown = document.getElementById('accountDropdown');
    dropdown.classList.toggle('show');
});

// Close dropdown when clicking outside
document.addEventListener('click', function(e) {
    const dropdown = document.getElementById('accountDropdown');
    const accountBtn = document.getElementById('accountDropdownBtn');
    if (!dropdown.contains(e.target) && e.target !== accountBtn && !accountBtn.contains(e.target)) {
        dropdown.classList.remove('show');
    }
});

// For createQuiz.php redirection
window.__QUIZ_REDIRECTING__ = false;

// For Back Button
function absUrl(path) {
  return window.location.origin + '/GAKUMON/' + path.replace(/^\//, '');
}
function saveQuizReturnState(reopen) {
  const state = {
    path: window.location.pathname,
    scrollY: window.scrollY,
    reopen,
    ts: Date.now()
  };
  sessionStorage.setItem('quizReturn', JSON.stringify(state));
}

// For Take Quiz Button
let selectedLessonId = null;

function absUrl(path) {
  return window.location.origin + '/GAKUMON/' + path.replace(/^\//, '');
}

function wireQuizLinks(lesson) {
  selectedLessonId = lesson.id;
  const quizUrl = absUrl(`quiz.php?lesson_id=${encodeURIComponent(selectedLessonId)}`);

  const ids = ['take-quiz-link', 'take-quiz-link-2']; // two buttons on this page
  ids.forEach((id) => {
    const a = document.getElementById(id);
    if (a) {
      a.setAttribute('href', quizUrl);
      a.dataset.lessonId = selectedLessonId; // optional, for debugging/analytics
    }
  });
}

// For Lessons Appearance
const lessons = window.lessons || { all: [], enrolled: [], my: [], published: [] };

function getLessonsByCategory(cat) {
  if (cat === 'mylessons') {
    return window.lessons.my || [];
  }
  if (cat === 'published') {
    return window.lessons.published || [];
  }
  if (cat === 'enrolled') {
    return window.lessons.enrolled || [];
  }
  // default: all lessons (includes GakuLessons)
  return window.lessons.all || [];
}

// Function to check if there are enrolled lessons and toggle visibility
function checkEnrolledLessons() {
    const noLessonsContainer = document.querySelector('.no-lessons-container');
    const noLessonsMessage = document.querySelector('.no-lessons-message');
    const lessonCards = document.querySelectorAll('.lesson-card');
    
    if (!noLessonsContainer || !noLessonsMessage) return;

    if (lessonCards.length === 0) {
        if (currentCategory === 'published') {
            noLessonsMessage.textContent = 'You have no published GakuLessons yet.';
        } else if (currentCategory === 'mylessons') {
            noLessonsMessage.textContent = 'You haven’t created any lessons yet.';
        } else {
            noLessonsMessage.textContent = 'No lessons found.';
        }
        noLessonsContainer.style.display = 'block';
    } else {
        noLessonsContainer.style.display = 'none';
    }
}

// Enable horizontal scrolling with mouse wheel for tabs
document.addEventListener('DOMContentLoaded', function() {

    // Auto-generate button: save, then go to autoGeneratedQuiz.php
    const autoGenBtn = document.getElementById('autoGenBtn');
    if (autoGenBtn) {
        autoGenBtn.addEventListener('click', function () {
        saveLesson('auto');
        });
    }

    const tabsScroll = document.querySelector('.tabs-scroll');
    
    // Enable horizontal scrolling with mouse wheel
    if (tabsScroll) {
        tabsScroll.addEventListener('wheel', function(e) {
            if (e.deltaY !== 0) {
                // Prevent vertical scrolling only if we're scrolling horizontally
                if (Math.abs(e.deltaX) < Math.abs(e.deltaY)) {
                    e.preventDefault();
                }
                // Scroll horizontally
                this.scrollLeft += e.deltaY;
            }
        });
    }
    
    // Initialize the page
    init();
    
    // Make sure the cards container doesn't create a scrollbar
    const cardsContainer = document.querySelector('.cards-container');
    if (cardsContainer) {
        cardsContainer.style.overflowY = 'hidden';
    }

    // Search functionality
    const searchForm = document.getElementById('lessonSearchForm');
    const searchInput = document.getElementById('lessonSearchInput');

    if (searchForm && searchInput) {
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const query = searchInput.value.trim().toLowerCase();
            searchLessons(query);
        });

        searchInput.addEventListener('input', function() {
            const query = searchInput.value.trim().toLowerCase();
            searchLessons(query);
        });
    }

    // Add Lesson button functionality - UPDATED
    const addLessonBtn = document.querySelector('.addlLessonBtn');
    if (addLessonBtn) {
        addLessonBtn.addEventListener('click', function() {
            openAddLessonModal();
        });
    }

    // Initialize topic selection
    initTopicSelection();

    // For Back Button
    const raw = sessionStorage.getItem('quizRestore');
    if (raw) {
        sessionStorage.removeItem('quizRestore');
        try {
        const r = JSON.parse(raw);
        if (r.path === window.location.pathname) {
            window.scrollTo(0, r.scrollY || 0);
            if (r.reopen?.type === 'materials' && r.reopen.lessonId) {
            const lesson = (lessons?.all || []).find(L => String(L.id) === String(r.reopen.lessonId));
            if (lesson) openMaterialsModal(lesson, r.reopen.materialType || 'video');
            } else if (r.reopen?.type === 'lesson' && r.reopen.lessonId) {
            const lesson = (lessons?.all || []).find(L => String(L.id) === String(r.reopen.lessonId));
            if (lesson) openLessonModal(lesson);
            }
        }
        } catch {}
    }
});

// Topic selection functionality
function initTopicSelection() {
    const topicSelect = document.getElementById('topicSelect');
    const customTopicInput = document.getElementById('customTopicInput');
    
    if (topicSelect) {
        topicSelect.addEventListener('change', function() {
            if (this.value === 'custom') {
                customTopicInput.style.display = 'block';
                customTopicInput.focus();
            } else {
                customTopicInput.style.display = 'none';
            }
        });
    }
}

// Add Lesson Modal Functions
function openAddLessonModal() {
    const modal = document.getElementById('addLessonModal');
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
}

function closeAddLessonModal() {
    const modal = document.getElementById('addLessonModal');
    modal.classList.remove('active');
    document.body.style.overflow = '';
}

// Add Materials Modal Functions
function openAddMaterialsModal() {
    // Validate basic form first
    const title = document.getElementById('lessonTitle').value;
    const topic = getSelectedTopic();
    const duration = document.getElementById('lessonDuration').value;
    const difficulty = document.getElementById('lessonDifficulty').value;
    
    if (!title || !topic || !duration || !difficulty) {
        alert('Please fill in all required fields: Title, Topic, Duration, and Difficulty');
        return;
    }
    
    // Populate materials modal with lesson info
    document.getElementById('materialsLessonTitle').textContent = title;
    document.getElementById('materialsLessonTopic').textContent = topic;
    document.getElementById('materialsLessonDuration').textContent = duration;
    document.getElementById('materialsLessonDifficulty').textContent = difficulty;
    
    // Close add lesson modal and open materials modal
    closeAddLessonModal();
    
    const materialsModal = document.getElementById('addMaterialsModal');
    materialsModal.classList.add('active');
}

function closeAddMaterialsModal() {
    const modal = document.getElementById('addMaterialsModal');
    modal.classList.remove('active');
    document.body.style.overflow = '';
}

function backToAddLessonModal() {
    closeAddMaterialsModal();
    openAddLessonModal();
}

// Topic handling
function getSelectedTopic() {
    const topicSelect = document.getElementById('topicSelect');
    const customTopicInput = document.getElementById('customTopicInput');
    
    if (topicSelect.value === 'custom') {
        return customTopicInput.value.trim();
    }
    return topicSelect.value;
}

// Learning Objectives Management
function addObjective() {
    const container = document.getElementById('objectivesContainer');
    const newObjective = document.createElement('div');
    newObjective.className = 'objective-input-group';
    newObjective.innerHTML = `
        <input type="text" class="objective-input" placeholder="Enter learning objective">
        <button type="button" class="btn-remove-objective" onclick="removeObjective(this)">×</button>
    `;
    container.appendChild(newObjective);
}

function removeObjective(button) {
    const container = document.getElementById('objectivesContainer');
    if (container.children.length > 1) {
        button.parentElement.remove();
    }
}

// File Upload Handling
function handleFileUpload(files) {
    const uploadedFilesContainer = document.getElementById('uploadedFiles');
    
    Array.from(files).forEach(file => {
        const fileElement = document.createElement('div');
        fileElement.className = 'uploaded-file';
        fileElement.innerHTML = `
            <div class="file-info">
                <i class="fas fa-file"></i>
                <span>${file.name}</span>
                <small>${formatFileSize(file.size)}</small>
            </div>
            <button class="btn-remove-file" onclick="removeFile(this)">×</button>
        `;
        uploadedFilesContainer.appendChild(fileElement);
    });
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function removeFile(button) {
    button.parentElement.remove();
}

// Drag and drop functionality
document.addEventListener('DOMContentLoaded', function() {
    const uploadZone = document.getElementById('uploadZone');
    const fileInput = document.getElementById('fileUpload');
    
    if (uploadZone && fileInput) {
        uploadZone.addEventListener('click', () => fileInput.click());
        
        uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadZone.classList.add('drag-over');
        });
        
        uploadZone.addEventListener('dragleave', () => {
            uploadZone.classList.remove('drag-over');
        });
        
        uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('drag-over');
            handleFileUpload(e.dataTransfer.files);
        });
    }
});

function pickEl(selectors) {
  for (const s of selectors) {
    const el = document.querySelector(s);
    if (el) return el;
  }
  return null;
}

function readAutoGenOptions({ strict } = { strict: false }) {
  const countEl = pickEl([
    '#autoGenQuestionCount',        // ✅ your actual ID
    '#numberOfQuestions',
    '#numberOfQuestion',
    '#autoQuizCount',
    '#quizQuestionCount',
    '[name="numberOfQuestion"]',    // ✅ your actual name
    '[name="numberOfQuestions"]',
    '[name="numberofQuestion"]'
  ]);
  const typeEl = pickEl([
    '#autoGenType',                 // ✅ your actual ID
    '#quizType',
    '#autoQuizType',
    '[name="selectedOption"]',
    '[name="quizType"]'
  ]);

  let count = parseInt(String(countEl?.value || '').trim(), 10);
  const typeRaw = String(typeEl?.value || '').trim();

  const map = {
    'multiple choice': 'Multiple Choice',
    'multiple_choice': 'Multiple Choice',
    'mcq': 'Multiple Choice',
    'identification': 'Identification',
    'true or false': 'True or False',
    'true_false': 'True or False',
    'true/false': 'True or False',
    'fill in the blanks': 'Fill in the Blanks',
    'fill_in_the_blanks': 'Fill in the Blanks',
    'fib': 'Fill in the Blanks'
  };
  const type = map[typeRaw.toLowerCase()] || typeRaw;

  const okCount = Number.isInteger(count) && count >= 5 && count <= 15;
  const okType  = ['Multiple Choice','Identification','True or False','Fill in the Blanks'].includes(type);

  if (strict) {
    if (!okCount) alert('Please enter a number of questions from 5 to 15.');
    if (!okType)  alert('Please choose a quiz type.');
    if (!okCount || !okType) return { ok: false };
  }

  if (!okCount) count = Math.max(5, Math.min(15, Number.isFinite(count) ? count : 10));
  return { ok: true, count, type };
}

// Save Lesson Function
async function saveLesson(mode) {
    const title       = document.getElementById('lessonTitle').value.trim();
    const topic       = getSelectedTopic();                 
    const duration    = document.getElementById('lessonDuration').value.trim();
    const difficulty  = document.getElementById('lessonDifficulty').value.trim();
    const description = document.getElementById('lessonDescription').value.trim();

    // Get privacy setting - Gakusensei can choose, Gakusei are forced to private
    const privacySelect = document.getElementById('lessonPrivacy');
    const is_private = privacySelect ? parseInt(privacySelect.value) : 1; // Default to private if not found

    // Collect objectives
    const objectives = [];
    document.querySelectorAll('.objective-input').forEach(input => {
    const val = input.value.trim();
    if (val) objectives.push(val);
    });

    if (!title || !topic || !duration || !difficulty || !description) {
    alert('Please fill in all required fields');
    return;
    }

    // Build FormData
    const fd = new FormData();
    fd.append('title', title);
    fd.append('short_desc', description.slice(0, 150));
    fd.append('long_desc', description);
    fd.append('duration', duration);
    fd.append('difficulty', difficulty);
    fd.append('is_private', String(is_private)); // Add privacy setting

  // If topicSelect uses IDs, set topic_id; if custom, set custom_topic
    const topicSelect = document.getElementById('topicSelect');
    const customTopicInput = document.getElementById('customTopicInput');

    const rawVal = topicSelect?.value?.trim();
    const isCustom = rawVal === 'custom';
    const customTopic = isCustom ? (customTopicInput?.value.trim() || '') : '';

    if (!isCustom && rawVal && /^\d+$/.test(rawVal)) {
    // existing topic: numeric id only
    fd.append('topic_id', rawVal);
    } else if (isCustom && customTopic) {
    // custom topic text
    fd.append('custom_topic', customTopic);
    } else {
    // fallback: treat the selected option's label as a custom topic name
    const label = topicSelect?.options[topicSelect.selectedIndex]?.text?.trim();
    if (label) {
        fd.append('custom_topic', label);
    } else {
        alert('Please select a Topic or enter a Custom Topic.');
        return;
    }
    }

  // Objectives as JSON
  fd.append('objectives', JSON.stringify(objectives));

  // (Optional) real uploads if your modal has <input type="file" multiple id="fileUpload">
  const fileInput = document.getElementById('fileUpload');
  if (fileInput && fileInput.files && fileInput.files.length) {
    // If you want to separate per type, add two inputs and map to notes_files / video_files
    for (const f of fileInput.files) fd.append('attachments[]', f); // or video_files[]
  }

  try {
    const res = await fetch('/GAKUMON/include/lessonCreate.inc.php', { method: 'POST', body: fd });
    const text = await res.text(); // grab raw
    let data;
    try { data = JSON.parse(text); } catch { data = null; }

    if (!res.ok || !data || !data.ok) {
    console.error('Save failed. Raw response:', text);
    alert('Failed to save lesson. Please check Console for details.');
    return;
    }

    alert('Lesson saved successfully!');

    const lessonId = data?.lesson?.lesson_id;
    if (lessonId) {
        if (mode === 'auto') {
            const countEl = document.querySelector('#autoGenQuestionCount'); // your number input
            const typeEl  = document.querySelector('#autoGenType');          // your type <select>

            let count = parseInt(String(countEl?.value || '').trim(), 10);
            if (!Number.isInteger(count)) count = 10;
            count = Math.max(5, Math.min(15, count));

            const selectedType = String(typeEl?.value || 'Multiple Choice').trim();

            const params = new URLSearchParams();
            // always include lesson id
            params.set('lesson_id', String(lessonId));
            // set BOTH forms of the count key to be safe
            params.set('numberOfQuestions', String(count)); // CamelCase plural
            params.set('numberofQuestion', String(count));  // legacy singular
            // pass the type with the exact key your PHP expects
            params.set('selectedOption', selectedType);

            const material =
            data?.material ??
            (Array.isArray(data?.materials) && data.materials[0]) ??
            data?.file ??
            (Array.isArray(data?.files) && data.files[0]) ??
            data?.uploadedFile ??
            null;

            const fileId = material?.id ?? material?.file_id ?? material?.material_id ?? null;
            if (fileId) {
            params.set('file_id', String(fileId));   // 🔥 pass the exact uploaded file id
            }

            // (optional) a filename hint — harmless and can help if needed
            const originalName = material?.original_name ?? material?.filename ?? material?.file_name ?? null;
            if (originalName) {
            params.set('file_hint', originalName);
            }

            // Optional: quick debug to verify the URL has the right values
            console.log('➡ redirect:', `autoGeneratedQuiz.php?${params.toString()}`);

            window.location.assign(`autoGeneratedQuiz.php?${params.toString()}`);
            return;
        } else {
            window.location.assign(`createQuiz.php?lesson_id=${encodeURIComponent(lessonId)}`);
        }
        return;
    }

    setTimeout(() => {
    window.location.assign(url.toString());
    }, 0);
    closeAddMaterialsModal();
    resetAddLessonForm();

    // OPTIONAL: add to in-memory list so it appears without full reload
    if (window.lessons && Array.isArray(window.lessons.all)) {
      window.lessons.all.unshift({
        id: data.lesson.lesson_id,
        title,
        short_desc: data.lesson.short_desc,
        long_desc: data.lesson.long_desc,
        duration,
        difficulty,
        topic: (topicSelect && topicSelect.options[topicSelect.selectedIndex])
                ? topicSelect.options[topicSelect.selectedIndex].text
                : (topic || 'General'),
        objectives,  // keep them for modal display immediately
        icon: '<i class="bi bi-journal-text"></i>' // or compute from topic
      });
      // Repaint current view
      showLessons(currentCategory);
    }
  } catch (err) {
    console.error(err);
    if (window.__QUIZ_REDIRECTING__) {
        // Ignore aborts caused by navigation
        if (err && (err.name === 'AbortError' || /abort|navigation/i.test(String(err.message)))) {
            return;
        }
    }
    if (!window.__QUIZ_REDIRECTING__) alert('Failed to save lesson');
  }
}

function resetAddLessonForm() {
    document.getElementById('addLessonForm').reset();
    document.getElementById('topicSelect').value = '';
    document.getElementById('customTopicInput').style.display = 'none';
    document.getElementById('objectivesContainer').innerHTML = `
        <div class="objective-input-group">
            <input type="text" class="objective-input" placeholder="Enter learning objective">
            <button type="button" class="btn-remove-objective" onclick="removeObjective(this)">×</button>
        </div>
    `;
    document.getElementById('uploadedFiles').innerHTML = '';
}

// Search lessons and display results
function searchLessons(query) {
    let filteredLessons;
    if (!query) {
        // If search is empty, show all lessons in current category
        showLessons(currentCategory);
        return;
    }
    // Search in all lessons (title + description)
    filteredLessons = lessons.all.filter(lesson =>
        lesson.title.toLowerCase().includes(query) ||
        (lesson.short_desc && lesson.short_desc.toLowerCase().includes(query)) ||
        (lesson.topic && lesson.topic.toLowerCase().includes(query))
    );

    // Show filtered lessons
    showFilteredLessons(filteredLessons);
}

// Show filtered lessons (no pagination for search results)
function showFilteredLessons(filteredLessons) {
    cardsGrid.innerHTML = '';
    if (filteredLessons.length === 0) {
        cardsGrid.innerHTML = '<div class="no-results">No lessons found</div>';
        return;
    }
    filteredLessons.forEach(lesson => {
        const card = document.createElement('div');
        card.className = 'lesson-card';
        const author = lesson.author_name || 'GakuLesson';
        card.innerHTML = `
            <div class="card-img">
                ${lesson.icon}
            </div>
            <div class="card-content">
                <div class="lesson-title">${lesson.title}</div>
                <div class="labels">
                    <div class="cardLabel cardLabel-gaku">@${author}</div>
                    <div class="label label-topic">${lesson.topic}</div>
                </div>
                <div class="lesson-description">${lesson.short_desc}</div>
                <div class="card-meta">
                    <span>${lesson.duration}</span>
                    <span>${lesson.difficulty}</span>
                </div>
            </div>
        `;
        card.addEventListener('click', () => {
            openLessonModal(lesson);
        });
        cardsGrid.appendChild(card);
    });
    checkEnrolledLessons();
}

// DOM elements
const tabs = document.querySelectorAll('.tab');
const cardsGrid = document.querySelector('.cards-grid');
const paginationLinks = document.querySelectorAll('.page-link');

// Current state
let currentCategory = 'gakulessons';
let currentPage = 1;
const itemsPerPage = 9;

// Initialize the page
function init() {
    // Add event listeners to tabs
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const category = tab.getAttribute('data-category');
            setActiveTab(tab);
            showLessons(category);
        });
    });
    
    // Add event listeners to pagination
    paginationLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            const action = link.classList.contains('prev') ? 'prev' : 
                            link.classList.contains('next') ? 'next' : 'page';
            
            if (action === 'prev' && currentPage > 1) {
                currentPage--;
                showLessons(currentCategory);
            } else if (action === 'next' && currentPage < getTotalPages()) {
                currentPage++;
                showLessons(currentCategory);
            } else if (action === 'page') {
                currentPage = parseInt(link.textContent);
                showLessons(currentCategory);
            }
            
            updatePagination();
        });
    });
    
    // Load initial lessons
    showLessons(currentCategory);
}

// Set active tab
function setActiveTab(activeTab) {
    tabs.forEach(tab => tab.classList.remove('active'));
    activeTab.classList.add('active');
    currentCategory = activeTab.getAttribute('data-category');
    currentPage = 1; // Reset to first page when changing category
}

// Show lessons for the selected category
function showLessons(category) {
    let categoryLessons;

    if (category === 'gakulessons') {
        // Show ENROLLED lessons
        categoryLessons = lessons.all || [];
    } else if (category === 'mylessons') {
        // Lessons created by the logged-in user
        categoryLessons = lessons.my || [];
    } else if (category === 'published') {
        // Published Gaku Lessons
        categoryLessons = lessons.published || [];
    } else {
        // Fallback
        categoryLessons = lessons.all || [];
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedLessons = categoryLessons.slice(startIndex, startIndex + itemsPerPage);
    
    // Clear the grid
    cardsGrid.innerHTML = '';
    
    // Add lessons to the grid
    paginatedLessons.forEach(lesson => {
        const card = document.createElement('div');
        card.className = 'lesson-card';
        const author = lesson.author_name || 'GakuLesson';
        card.innerHTML = `
            <div class="card-img">
                ${lesson.icon}
            </div>
            <div class="card-content">
                <div class="lesson-title">${lesson.title}</div>
                <div class="labels">
                    <div class="cardLabel cardLabel-gaku">@${author}</div>
                    <div class="label label-topic">${lesson.topic}</div>
                </div>
                <div class="lesson-description">${lesson.short_desc}</div>
                <div class="card-meta">
                    <span>${lesson.duration}</span>
                    <span>${lesson.difficulty}</span>
                </div>
            </div>
        `;
        
        // Add click event to open modal
        card.addEventListener('click', () => {
            openLessonModal(lesson);
        });
        
        cardsGrid.appendChild(card);
    });
    
    // Update pagination
    updatePagination();
    
    // Check if we need to show the "No Lessons" message
    checkEnrolledLessons();
}

// Get total pages for current category
function getTotalPages() {
    let categoryLessons;

    if (currentCategory === 'gakulessons') {
        categoryLessons = lessons.all || [];
    } else if (currentCategory === 'mylessons') {
        categoryLessons = lessons.my || [];
    } else if (currentCategory === 'published') {
        categoryLessons = lessons.published || [];
    } else {
        categoryLessons = lessons.all || [];
    }
    return Math.ceil(categoryLessons.length / itemsPerPage);
}

// Update pagination UI
function updatePagination() {
    const totalPages = getTotalPages();
    const pageItems = document.querySelectorAll('.page-item');
    
    // Hide all page number items first
    pageItems.forEach(item => {
        if (!item.querySelector('.prev') && !item.querySelector('.next')) {
            item.style.display = 'none';
        }
    });
    
    // Show only necessary pages
    let startPage = Math.max(1, currentPage - 1);
    let endPage = Math.min(totalPages, startPage + 2);
    
    if (endPage - startPage < 2) {
        startPage = Math.max(1, endPage - 2);
    }
    
    let pageIndex = 0;
    for (let i = startPage; i <= endPage; i++) {
        if (pageItems[pageIndex + 1]) {
            pageItems[pageIndex + 1].style.display = 'block';
            const pageLink = pageItems[pageIndex + 1].querySelector('.page-link');
            pageLink.textContent = i;
            pageLink.classList.toggle('active', i === currentPage);
            pageIndex++;
        }
    }
    
    // Update prev/next buttons state
    document.querySelector('.prev').parentElement.style.display = 'block';
    document.querySelector('.next').parentElement.style.display = 'block';
    
    document.querySelector('.prev').style.opacity = currentPage > 1 ? '1' : '0.5';
    document.querySelector('.next').style.opacity = currentPage < totalPages ? '1' : '0.5';
}

// --- Objectives renderer (place this RIGHT ABOVE openLessonModal) ---
function renderObjectives(list) {
  if (!Array.isArray(list) || list.length === 0) return '<em>No objectives provided yet.</em>';
  return '<ul>' + list.map(t => `<li>${t}</li>`).join('') + '</ul>';
}

// Function to open lesson modal
function openLessonModal(lesson) {
    const modal = document.getElementById('lessonModal');
    const modalBody = document.querySelector('.modal-lesson-content');
    const modalIcon = document.getElementById('lessonModalIcon');

    // Set the icon
    modalIcon.innerHTML = lesson.icon || '<i class="bi bi-journal-text"></i>';

    // Build objectives HTML for this lesson
    let objectivesHtml = renderObjectives(lesson.objectives);
    
    // Populate modal content
    modalBody.innerHTML = `
        <div class="modal-lesson-header">
            <div class="cardLesson-title">${lesson.title}</div>
            <div class="labels">
                <div class="cardLabel cardLabel-gaku">@${lesson.author_name || 'GakuLesson'}</div>
                <div class="cardLabel cardLabel-topic">${lesson.topic}</div>
            </div>
        
            <div class="modal-meta">
                <span><i class="fas fa-clock"></i> ${lesson.duration}</span>
                <span><i class="fas fa-signal"></i> ${lesson.difficulty}</span>
            </div>
        </div>
        <div class="modal-lesson-description">
            <div class="cardLesson-description">${lesson.long_desc}</div>
        </div>
        <div class="modal-lesson-objectives">
            <div class="cardObjectives">Learning Objectives</div>
            ${objectivesHtml}
        </div>
        <div class="folders-container">
            <div class="folder-wrapper" data-type="video">
                <div class="folder">
                    <div class="folder-back"></div>
                    <div class="folder-front"><i class="fas fa-video"></i></div>
                    <div class="folder-tab"></div>
                </div>
                <div class="folder-name">Video Lectures</div>
            </div>
            
            <div class="folder-wrapper" data-type="notes">
                <div class="folder">
                    <div class="folder-back"></div>
                    <div class="folder-front"><i class="fas fa-file-alt"></i></div>
                    <div class="folder-tab"></div>
                </div>
                <div class="folder-name">Notes Lecture</div>
            </div>
        </div>
    `;

    // For Objectives
    const lessonId = Number(lesson.id ?? lesson.lesson_id);
    if (!Number.isInteger(lessonId) || lessonId <= 0) {
    console.error('Missing/invalid lesson_id for objectives:', lesson);
    } else {
    fetch(`/GAKUMON/include/lessonObjectives.inc.php?lesson_id=${lessonId}`)
        .then(r => r.ok ? r.json() : Promise.reject(r))
        .then(data => {
        if (data?.ok) {
            lesson.objectives = data.objectives.map(o => o.objective_text);
            const box = document.querySelector('#lessonModal .modal-lesson-objectives');
            if (box) {
            box.innerHTML = `
                <div class="cardObjectives">Learning Objectives</div>
                ${renderObjectives(lesson.objectives)}
            `;
            }
        } else {
            console.warn('Objectives fetch failed:', data);
        }
        })
        .catch(err => console.error('Objectives fetch error', err));
    }

    const quickQuizBtn = document.getElementById('take-quiz-link-2'); // your second button id
    if (quickQuizBtn) {
        const origin = window.location.pathname;
        quickQuizBtn.setAttribute(
        'href',
        absUrl(`quiz.php?lesson_id=${lesson.id}&from=${encodeURIComponent(origin)}`)
        );
        quickQuizBtn.addEventListener('click', () => {
        saveQuizReturnState({ type: 'lesson', lessonId: lesson.id });
        }, { once: true });
    }
    
    // Show the modal with animation
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';

    // For Take Quiz
    wireQuizLinks(lesson);   // keep both buttons in sync with the selected lesson
    
    // Add event listeners to close buttons
    const closeButtons = document.querySelectorAll('.custom-modal-close, .custom-modal-close-btn');
    closeButtons.forEach(button => {
        button.addEventListener('click', closeLessonModal);
    });
    
    // Add event listener to the Start Lesson button
    const startLessonBtn = document.querySelector('.start-lesson-btn');
    if (startLessonBtn) {
        startLessonBtn.onclick = function() {
            window.location.href = `lesson.php?id=${lesson.id}`;
        };
    }
    
    // Close modal when clicking on backdrop
    const backdrop = document.querySelector('.custom-modal-backdrop');
    backdrop.addEventListener('click', closeLessonModal);
    
    // Add click events to folders
    const videoFolder = document.querySelector('.folder-wrapper[data-type="video"]');
    const notesFolder = document.querySelector('.folder-wrapper[data-type="notes"]');
    
    if (videoFolder) {
        videoFolder.addEventListener('click', () => {
            openMaterialsModal(lesson, 'video');
        });
    }
    
    if (notesFolder) {
        notesFolder.addEventListener('click', () => {
            openMaterialsModal(lesson, 'notes');
        });
    }
}

// Function to close the modal
function closeLessonModal() {
    const modal = document.getElementById('lessonModal');
    modal.classList.remove('active');
    document.body.style.overflow = ''; // Re-enable scrolling
    
    // Remove event listeners to prevent memory leaks
    const closeButtons = document.querySelectorAll('.custom-modal-close, .custom-modal-close-btn');
    closeButtons.forEach(button => {
        button.removeEventListener('click', closeLessonModal);
    });
    
    const backdrop = document.querySelector('.custom-modal-backdrop');
    backdrop.removeEventListener('click', closeLessonModal);
}

// Function to open materials modal
function openMaterialsModal(lesson, materialType) {
    // Close the lesson modal first
    closeLessonModal();
    
    // Populate the materials modal with lesson info
    document.getElementById('materialsIcon').className = lesson.icon;
    document.getElementById('materialsTitle').textContent = lesson.title;
    document.getElementById('materialsTopic').textContent = lesson.topic;
    document.getElementById('materialsDuration').textContent = lesson.duration;
    document.getElementById('materialsDifficulty').textContent = lesson.difficulty;
    document.getElementById('materialsTypeHeader').textContent = 
        materialType === 'video' ? 'Video Lectures' : 'Notes Lecture';
    
    // TRY CODE
    // Check if lesson.files exists and filter files by type
    const files = lesson.files ? lesson.files.filter(file => 
        materialType === 'video' ? file.file_type === 'Video' : file.file_type === 'Notes'
    ) : [];

    // Populate files list
    const materialsList = document.getElementById('materialsList');
    materialsList.innerHTML = '';
    
    if (!files || files.length === 0) {
        materialsList.innerHTML = '<div class="no-materials">No materials available</div>';
    } else {
        files.forEach(file => {
            // Add debugging to check file object
            console.log('File object:', file);
            
            const fileExt = file.file_url.split('.').pop().toLowerCase();
            let iconClass = 'fa-file';
            
            // Set icon based on file type
            if (fileExt === 'pdf') iconClass = 'fa-file-pdf';
            else if (['mp4', 'mov', 'avi', 'wmv'].includes(fileExt)) iconClass = 'fa-file-video';
            else if (['doc', 'docx'].includes(fileExt)) iconClass = 'fa-file-word';
            
            const materialItem = document.createElement('div');
            materialItem.className = 'material-item';
            materialItem.innerHTML = `
                <div class="material-icon"><i class="fas ${iconClass}"></i></div>
                <div class="material-name">${file.file_url.split('/').pop()}</div>
                <button class="material-action" onclick="viewMaterial('${file.file_url}', '${fileExt}')">View</button>
            `;
            materialsList.appendChild(materialItem);
        });
    }

    // For Take Quiz Button
    wireQuizLinks(lesson);   // keep both buttons in sync with the selected lesson

    // For Back Button
    const quizLink = document.getElementById('take-quiz-link');
    if (quizLink) {
    const origin = window.location.pathname; // "/GAKUMON/lessons.php"
    quizLink.setAttribute(
        'href',
        absUrl(`quiz.php?lesson_id=${lesson.id}&from=${encodeURIComponent(origin)}`)
    );
    quizLink.addEventListener('click', () => {
        saveQuizReturnState({ type: 'materials', lessonId: lesson.id, materialType });
    }, { once: true });
    }

    // Add event listeners
    document.getElementById('backToLessonModal').addEventListener('click', () => {
        closeMaterialsModal();
        setTimeout(() => {
            openLessonModal(lesson); // Reopen the first modal after a brief delay
        }, 50);
    });

    // Show the materials modal
    document.getElementById('materialsModal').classList.add('active');
}

// Function to close materials modal
function closeMaterialsModal() {
    document.getElementById('materialsModal').classList.remove('active');
    
    // Remove event listeners
    document.getElementById('backToLessonModal').removeEventListener('click', () => {});
}

// TRY VIEW MATERIAL
// Update the viewMaterial function to handle the file paths
function viewMaterial(url, fileType) {
    // Construct the full URL if it's a relative path
    const baseUrl = window.location.origin + '/GAKUMON/';
    const fullUrl = url.startsWith('http') ? url : baseUrl + url;
    
    console.log('Opening file:', fullUrl); // Debug log
    
    if (['mp4', 'mov', 'avi', 'wmv'].includes(fileType)) {
        window.open(fullUrl, '_blank');
    } else if (fileType === 'pdf') {
        window.open(fullUrl, '_blank');
    } else {
        window.open(fullUrl, '_blank');
    }
}

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        if (document.getElementById('materialsModal').classList.contains('active')) {
            closeMaterialsModal();
        } else if (document.getElementById('lessonModal').classList.contains('active')) {
            closeLessonModal();
        }
    }
});

// If some other script blocks anchors, this guarantees navigation.
document.addEventListener('click', (e) => {
  const a = e.target.closest('#take-quiz-link, #take-quiz-link-2');
  if (!a) return;
  const href = a.getAttribute('href') || '';
  if (!href) {
    e.preventDefault();
    if (selectedLessonId) {
      window.location.assign(absUrl(`quiz.php?lesson_id=${encodeURIComponent(selectedLessonId)}`));
    }
  }
}, { passive: true });